.nlist

;This file is part of Xperiment68k
;Copyright (C) 2025 TcbnErik
;
;This program is free software: you can redistribute it and/or modify
;it under the terms of the GNU General Public License as published by
;the Free Software Foundation, either version 3 of the License, or
;(at your option) any later version.
;
;This program is distributed in the hope that it will be useful,
;but WITHOUT ANY WARRANTY; without even the implied warranty of
;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;GNU General Public License for more details.
;
;You should have received a copy of the GNU General Public License
;along with this program.  If not, see <https://www.gnu.org/licenses/>.


.ifndef xputil_mac
        xputil_mac:=1

.include dosdef.mac
.nlist
.include console.mac
.nlist
.include doscall.mac
.nlist
.include iocscall.mac
.nlist


;グラフィック画面が使用できることを確認する
;  破壊レジスタ d0-d2
USE_GVRAM: .macro
  moveq #0,d1
  moveq #-1,d2
  IOCS _TGUSEMD
  btst d0,#%0110  ;d0=0:未使用 3:破壊
  beq @skip
    move #STDERR,-(sp)
    pea (@s,pc)
    DOS _FPUTS
    move #1,(sp)
    DOS _EXIT2
    @s: .dc.b 'グラフィック画面は使用中です。',LF,0
    .even
  @skip:
.endm


;Graphic Mask マスクリクエスト
;  破壊レジスタ d0-d2
GM_MASK_REQUEST: .macro
  move.l #'gm'<<16+$ff89,d1
  moveq #-1,d2
  IOCS _TGUSEMD
.endm


;指定アドレスを読み込んでバスエラーが発生するか調べる(バイト)
;  in  a0.l ... アドレス
;  out d0.b ... 読み込んだデータ
;      ccr .... Z=1:正常終了 Z=0:バスエラーが発生した
DEFINE_DOSBUSERRBYTE: .macro label
label:
  move #1,-(sp)
  move.l sp,-(sp)
  move.l a0,-(sp)
  DOS _BUS_ERR
  move.l d0,(sp)
  moveq #0,d0
  move.b (8,sp),d0
  tst.l (sp)+
  addq.l #10-4,sp
  rts
.endm

;指定アドレスに書き込んでバスエラーが発生するか調べる(バイト)
;  in  d0.b ... 書き込むデータ
;      a0.l ... アドレス
;  out ccr .... Z=1:正常終了 Z=0:バスエラーが発生した
DEFINE_DOSBUSERRBYTE_WRITE: .macro label
label:
  move.b d0,-(sp)
  move #1,-(sp)
  move.l a0,-(sp)
  pea (6,sp)
  DOS _BUS_ERR
  addq.l #(10+2)-4,sp
  move.l d0,(sp)+
  rts
.endm

;指定アドレスを読み込んでバスエラーが発生するか調べる(ワード)
;  in  a0.l ... アドレス
;  out d0.w ... 読み込んだデータ
;      ccr .... Z=1:正常終了 Z=0:バスエラーが発生した
DEFINE_DOSBUSERRWORD: .macro label
label:
  move #2,-(sp)
  move.l sp,-(sp)
  move.l a0,-(sp)
  DOS _BUS_ERR
  move.l d0,(sp)
  moveq #0,d0
  move (8,sp),d0
  tst.l (sp)+
  addq.l #10-4,sp
  rts
.endm

;指定アドレスを読み込んでバスエラーが発生するか調べる(ロングワード)
;  in  a0.l ... アドレス
;  out d0.l ... 読み込んだデータ
;      ccr .... Z=1:正常終了 Z=0:バスエラーが発生した
DEFINE_DOSBUSERRLONG: .macro label
label:
  move #4,-(sp)
  subq.l #4,sp
  move.l sp,(sp)
  move.l a0,-(sp)
  DOS _BUS_ERR
  move.l d0,(sp)
  move.l (4,sp),d0
  tst.l (sp)+
  addq.l #10-4,sp
  rts
.endm


;(マクロ内部で使用) 16進数文字列化テーブル
_DEFINE_HEXTABLE: .macro
  .even
  _HexTable: .dc.b '0123456789abcdef'

  _DEFINE_HEXTABLE: .macro
  .endm
.endm


;(マクロ内部で使用) 数値を16進数で文字列化(2桁)
_DEFINE_TOHEXSTRING2: .macro
_ToHexString2:
  .rept 2
    rol.b #4,d0
    moveq #$f,d1
    and.b d0,d1
    move.b (_HexTable,pc,d1.w),(a0)+
  .endm
  clr.b (a0)
  rts

  _DEFINE_TOHEXSTRING2: .macro
  .endm

  _DEFINE_HEXTABLE
.endm


;数値を16進数で文字列化(2桁)
DEFINE_TOHEXSTRING2: .macro label
label: .equ _ToHexString2

  _DEFINE_TOHEXSTRING2
.endm


;数値を16進数で文字列化(8桁)
DEFINE_TOHEXSTRING8: .macro label
label:
  swap d0
  bsr _ToHexString4
  swap d0
  bra _ToHexString4

  _DEFINE_TOHEXSTRING4
.endm


;(マクロ内部で使用) 数値を16進数で文字列化(4桁+アンダーバー+4桁)
_DEFINE_TOHEXSTRING4_4: .macro
_ToHexString4_4:
  swap d0
  bsr _ToHexString4
  move.b #'_',(a0)+
  swap d0
  bra _ToHexString4

  _DEFINE_TOHEXSTRING4_4: .macro
  .endm

  _DEFINE_TOHEXSTRING4
.endm


;(マクロ内部で使用) 数値を16進数で文字列化(4桁)
_DEFINE_TOHEXSTRING4: .macro
_ToHexString4:
  movem.l d1-d2,-(sp)
  moveq #4-1,d2
  @@:
    rol #4,d0
    moveq #$f,d1
    and.b d0,d1
    move.b (_HexTable,pc,d1.w),(a0)+
  dbra d2,@b
  clr.b (a0)
  movem.l (sp)+,d1-d2
  rts

  _DEFINE_TOHEXSTRING4: .macro
  .endm

  _DEFINE_HEXTABLE
.endm


;(マクロ内部で使用) 数値を16進数で文字列化(8桁)
_DEFINE_TOHEXSTRING8: .macro
_ToHexString8:
  swap d0
  bsr _ToHexString4
  swap d0
  bra _ToHexString4

  _DEFINE_TOHEXSTRING8: .macro
  .endm

  _DEFINE_TOHEXSTRING4
.endm


;数値を16進数で文字列化($+4桁)
DEFINE_TOHEXSTRING$4: .macro label
label:
  move.b #'$',(a0)+
  bra _ToHexString4

  _DEFINE_TOHEXSTRING4
.endm


;数値を16進数で文字列化(4桁)
DEFINE_TOHEXSTRING4: .macro label
label: .equ _ToHexString4

  _DEFINE_TOHEXSTRING4
.endm


;数値を16進数で文字列化($+4桁+アンダーバー+4桁)
DEFINE_TOHEXSTRING$4_4: .macro label
label:
  move.b #'$',(a0)+
  bra _ToHexString4_4

  _DEFINE_TOHEXSTRING4_4
.endm


;数値を16進数で文字列化(4桁+アンダーバー+4桁)
DEFINE_TOHEXSTRING4_4: .macro label
label: .equ _ToHexString4_4

  _DEFINE_TOHEXSTRING4_4
.endm


;数値を16進数で表示($+2桁)
DEFINE_PRINT$2: .macro label
label:
  move.l a0,-(sp)
  link a6,#-8
  lea (sp),a0
  move.b #'$',(a0)+
  bsr _ToHexString2
  DOS_PRINT (sp)
  unlk a6
  movea.l (sp)+,a0
  rts

  _DEFINE_TOHEXSTRING2
.endm


;数値を16進数で表示($+4桁)
DEFINE_PRINT$4: .macro label
label:
  move.l a0,-(sp)
  link a6,#-8
  lea (sp),a0
  move.b #'$',(a0)+
  bsr _ToHexString4
  DOS_PRINT (sp)
  unlk a6
  movea.l (sp)+,a0
  rts

  _DEFINE_TOHEXSTRING4
.endm


;数値を16進数で表示($+4桁+アンダーバー+4桁)
DEFINE_PRINT$4_4: .macro label
label:
  move.l a0,-(sp)
  link a6,#-16
  lea (sp),a0
  move.b #'$',(a0)+
  bsr _ToHexString4_4
  DOS_PRINT (sp)
  unlk a6
  movea.l (sp)+,a0
  rts

  _DEFINE_TOHEXSTRING4_4
.endm


;数値を16進数で表示(ヘッダ+$+4桁+アンダーバー+4桁)
DEFINE_PRINTD0$4_4: .macro label
label:
  move.l a0,-(sp)
  link a6,#-24
  lea (sp),a0
  move.l #'d0.l',(a0)+
  move.l #' = $',(a0)+
  bsr _ToHexString4_4
  DOS_PRINT (sp)
  unlk a6
  movea.l (sp)+,a0
  rts

  _DEFINE_TOHEXSTRING4_4
.endm


;数値を16進数で表示($+8桁)
DEFINE_PRINT$8: .macro label
label:
  move.l a0,-(sp)
  link a6,#-12
  lea (sp),a0
  move.b #'$',(a0)+
  bsr _ToHexString8
  DOS_PRINT (sp)
  unlk a6
  movea.l (sp)+,a0
  rts

  _DEFINE_TOHEXSTRING8
.endm


;CCRを文字列形式で表示(d0.bで指定、ccr=XNZVC)
DEFINE_PRINTCCR: .macro label
label:
  movem.l d1/a0-a1,-(sp)
  link a6,#-12
  lea (sp),a0
  move.l #'ccr=',(a0)+
  lea (@CcrChars,pc),a1
  lsl.b #3,d0  ;%xnzv_c000
  move.b (a1)+,d1
  1:
    add.b d0,d0
    bcs @f
      moveq #'_',d1
    @@:
    move.b d1,(a0)+
  move.b (a1)+,d1
  bne 1b
  clr.b (a0)
  DOS_PRINT (sp)
  unlk a6
  movem.l (sp)+,d1/a0-a1
  rts

  @CcrChars: .dc.b 'XNZVC',0
  .even
.endm


;IOCSのキーバッファを空にする
DEFINE_FLUSHIOCSKEY: .macro label
  @loop:
    IOCS _B_KEYINP
label:
    IOCS _B_KEYSNS
    tst.l d0
    bne @loop
  rts
.endm

;Human68kのキーバッファを空にする
DEFINE_FLUSHDOSKEY: .macro label
label:
  move.l #(.low._INPOUT)<<16+$ff,-(sp)
  DOS _KFLUSH
  addq.l #4,sp
  rts
.endm


;文字列を表示する(標準出力への出力)
DOS_PRINT: .macro ea
  pea ea
  DOS _PRINT
  addq.l #4,sp
.endm


;1行の使用法を表示する(標準出力への出力)
PRINT_1LINE_USAGE: .macro mes
  DOS_PRINT (@mes,pc)
  .data
  @mes: .dc.b mes,CR,LF,0
  .text
.endm


;(マクロ内部で使用) 改行コード
_DEFINE_STRCRLF: .macro
  .data
  _strCrLf: .dc.b CR,LF,0
  .text

  _DEFINE_STRCRLF: .macro
  .endm
.endm


;改行を表示する(標準出力への出力)
DOS_PRINT_CRLF: .macro
  DOS_PRINT (_strCrLf,pc)
  _DEFINE_STRCRLF
.endm


;文字列を表示する(IOCS)
IOCS_B_PRINT: .macro ea
  lea ea,a1
  IOCS _B_PRINT
.endm


;改行を表示する(IOCS)
B_PRINT_CRLF: .macro
  IOCS_B_PRINT (_strCrLf,pc)
  _DEFINE_STRCRLF
.endm


;空白文字を飛ばし、文字列が終端したかどうかを調べる
SKIP_SPACE: .macro an
  @loop:
    cmpi.b #' ',(an)+
  beq @loop
  tst.b -(an)
.endm


;MPUが68000か調べる
;in dn ... 使用するデータレジスタ
;out dn.l ... dn=0:68000-68010  dn=1:68020-68060
;    ccr
IS_MPU_68000: .macro dn
  @movq: moveq #1,dn
  .cpu 68020
  and.b (@movq-1,pc,dn.l*2),dn
  .cpu 68000
.endm


.endif

.list
