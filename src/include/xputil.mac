.nlist

# This file is part of Xperiment68k
# Copyright (C) 2023 TcbnErik
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.


.ifndef xputil_mac
        xputil_mac:=1

.include dosdef.mac
.include console.mac
.include doscall.mac
.include iocscall.mac


;グラフィック画面が使用できることを確認する
;  破壊レジスタ d0-d2
USE_GVRAM: .macro
  moveq #0,d1
  moveq #-1,d2
  IOCS _TGUSEMD
  btst d0,#%0110  ;d0=0:未使用 3:破壊
  beq @skip
    move #STDERR,-(sp)
    pea (@s,pc)
    DOS _FPUTS
    move #1,(sp)
    DOS _EXIT2
    @s: .dc.b 'グラフィック画面は使用中です。',LF,0
    .even
  @skip:
.endm


;Graphic Mask マスクリクエスト
;  破壊レジスタ d0-d2
GM_MASK_REQUEST: .macro
  move.l #'gm'<<16+$ff89,d1
  moveq #-1,d2
  IOCS _TGUSEMD
.endm


;指定アドレスを読み込んでバスエラーが発生するか調べる(バイト)
;  in  a0.l ... アドレス
;  out d0.b ... 読み込んだデータ
;      ccr .... Z=1:正常終了 Z=0:バスエラーが発生した
DEFINE_DOSBUSERRBYTE: .macro label
label:
  move #1,-(sp)
  move.l sp,-(sp)
  move.l a0,-(sp)
  DOS _BUS_ERR
  move.l d0,(sp)
  moveq #0,d0
  move.b (8,sp),d0
  tst.l (sp)+
  addq.l #10-4,sp
  rts
.endm

;指定アドレスを読み込んでバスエラーが発生するか調べる(ワード)
;  in  a0.l ... アドレス
;  out d0.w ... 読み込んだデータ
;      ccr .... Z=1:正常終了 Z=0:バスエラーが発生した
DEFINE_DOSBUSERRWORD: .macro label
label:
  move #2,-(sp)
  move.l sp,-(sp)
  move.l a0,-(sp)
  DOS _BUS_ERR
  move.l d0,(sp)
  moveq #0,d0
  move (8,sp),d0
  tst.l (sp)+
  addq.l #10-4,sp
  rts
.endm


;指定アドレスを読み込んでバスエラーが発生するか調べる(ロングワード)
;  in  a0.l ... アドレス
;  out d0.l ... 読み込んだデータ
;      ccr .... Z=1:正常終了 Z=0:バスエラーが発生した
DEFINE_DOSBUSERRLONG: .macro label
label:
  move #4,-(sp)
  subq.l #4,sp
  move.l sp,(sp)
  move.l a0,-(sp)
  DOS _BUS_ERR
  move.l d0,(sp)
  move.l (4,sp),d0
  tst.l (sp)+
  addq.l #10-4,sp
  rts
.endm


;(マクロ内部で使用) 16進数文字列化テーブル
_DEFINE_HEXTABLE: .macro
  .even
  _HexTable: .dc.b '0123456789abcdef'

  _DEFINE_HEXTABLE: .macro
  .endm
.endm


;数値を16進数で文字列化(2桁)
DEFINE_TOHEXSTRING2: .macro label
label:
  .rept 2
    rol.b #4,d0
    moveq #$f,d1
    and.b d0,d1
    move.b (_HexTable,pc,d1.w),(a0)+
  .endm
  clr.b (a0)
  rts

  _DEFINE_HEXTABLE
.endm


;(マクロ内部で使用) 数値を16進数で文字列化(4桁)
_DEFINE_TOHEXSTRING4: .macro
_ToHexString4:
  move.l d2,-(sp)
  moveq #4-1,d2
  @@:
    rol #4,d0
    moveq #$f,d1
    and.b d0,d1
    move.b (_HexTable,pc,d1.w),(a0)+
  dbra d2,@b
  clr.b (a0)
  move.l (sp)+,d2
  rts

  _DEFINE_TOHEXSTRING4: .macro
  .endm

  _DEFINE_HEXTABLE
.endm


;数値を16進数で文字列化(4桁)
DEFINE_TOHEXSTRING4: .macro label
label: .equ _ToHexString4

  _DEFINE_TOHEXSTRING4
.endm


;数値を16進数で文字列化(8桁)
DEFINE_TOHEXSTRING8: .macro label
label:
  swap d0
  bsr _ToHexString4
  swap d0
  bra _ToHexString4

  _DEFINE_TOHEXSTRING4
.endm


;数値を16進数で文字列化(4桁+アンダーバー+4桁)
DEFINE_TOHEXSTRING4_4: .macro label
label:
  swap d0
  bsr _ToHexString4
  move.b #'_',(a0)+
  swap d0
  bra _ToHexString4

  _DEFINE_TOHEXSTRING4
.endm


.endif

.list